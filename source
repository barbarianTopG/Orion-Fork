local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer;
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	KeyValidationFunction = Instance.new("BindableFunction"),
	Themes = {
		Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}
local _internalKeySuccessEvent = Instance.new("BindableEvent")
local Icons = {}
local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)
if not Success then
	warn("\nOrion Library - Failed to load Feather Icons. Error code: " .. tostring(Response) .. "\n")
end;
local function GetIcon(IconName)
	if Icons and Icons[IconName] then
		return Icons[IconName]
	else
		return nil
	end
end;
local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
if syn and syn.protect_gui then
	syn.protect_gui(Orion)
end;
Orion.Parent = gethui and gethui() or game:GetService("CoreGui")
if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
else
	for _, Interface in ipairs(game:GetService("CoreGui"):GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
end;
function OrionLib:IsRunning()
	return Orion and Orion.Parent
end;
local function AddConnection(Signal, Function)
	if not OrionLib:IsRunning() then
		return
	end;
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end;
task.spawn(function()
	while OrionLib:IsRunning() do
		task.wait()
	end;
	for _, Connection in ipairs(OrionLib.Connections) do
		Connection:Disconnect()
	end
end)
local function AddDraggingFunctionality(DragPoint, Main)
	local Dragging, DragInput, MousePos, FramePos;
	DragPoint.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			Dragging = true;
			MousePos = Input.Position;
			FramePos = Main.Position;
			local connection;
			connection = Input.Changed:Connect(function()
				if Input.UserInputState == Enum.UserInputState.End then
					Dragging = false;
					connection:Disconnect()
				end
			end)
		end
	end)
	DragPoint.InputChanged:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseMovement then
			DragInput = Input
		end
	end)
	UserInputService.InputChanged:Connect(function(Input)
		if Input == DragInput and Dragging then
			local Delta = Input.Position - MousePos;
			Main.Position = UDim2.new(FramePos.X.Scale, FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
		end
	end)
end;
local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in pairs(Properties or {}) do
		Object[i] = v
	end;
	for _, v in ipairs(Children or {}) do
		v.Parent = Object
	end;
	return Object
end;
local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end;
local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end;
local function SetProps(Element, Props)
	for Property, Value in pairs(Props) do
		Element[Property] = Value
	end;
	return Element
end;
local function SetChildren(Element, Children)
	for _, Child in ipairs(Children) do
		Child.Parent = Element
	end;
	return Element
end;
local function Round(Number, Factor)
	local Result = math.floor(Number / Factor + (math.sign(Number) * 0.5)) * Factor;
	if Result < 0 then
		Result = Result + Factor
	end;
	return Result
end;
local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") then
		return "BackgroundColor3"
	elseif Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	elseif Object:IsA("UIStroke") then
		return "Color"
	elseif Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	elseif Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
		return "ImageColor3"
	end;
	return nil
end;
local function AddThemeObject(Object, Type, children)
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end;
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local prop = ReturnProperty(Object)
	if prop then
		Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
	end;
	if children then
		for _, child in ipairs(children) do
			child.Parent = Object
		end
	end;
	return Object
end;
local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in ipairs(Type) do
			local prop = ReturnProperty(Object)
			if prop then
				Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Name]
			end
		end
	end
end;
local function PackColor(Color)
	return {
		R = Color.R * 255,
		G = Color.G * 255,
		B = Color.B * 255
	}
end;
local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end;
local function LoadCfg(Config)
	local success, Data = pcall(HttpService.JSONDecode, HttpService, Config)
	if not success then
		return warn("Orion Library Config Loader - Failed to decode config.")
	end;
	for a, b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function()
				if OrionLib.Flags[a].Type == "Colorpicker" then
					OrionLib.Flags[a]:Set(UnpackColor(b))
				else
					OrionLib.Flags[a]:Set(b)
				end
			end)
		else
			warn("Orion Library Config Loader - Could not find flag:", a, b)
		end
	end
end;
local function SaveCfg(Name)
	local Data = {}
	for i, v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end
	end;
	if writefile and OrionLib.Folder then
		writefile(OrionLib.Folder .. "/" .. Name .. ".txt", HttpService:JSONEncode(Data))
	end
end;
local WhitelistedMouse = {
	Enum.UserInputType.MouseButton1,
	Enum.UserInputType.MouseButton2,
	Enum.UserInputType.MouseButton3
}
local BlacklistedKeys = {
	Enum.KeyCode.Unknown,
	Enum.KeyCode.W,
	Enum.KeyCode.A,
	Enum.KeyCode.S,
	Enum.KeyCode.D,
	Enum.KeyCode.Up,
	Enum.KeyCode.Left,
	Enum.KeyCode.Down,
	Enum.KeyCode.Right,
	Enum.KeyCode.Slash,
	Enum.KeyCode.Tab,
	Enum.KeyCode.Backspace,
	Enum.KeyCode.Escape
}
local function CheckKey(Table, Key)
	for _, v in ipairs(Table) do
		if v == Key then
			return true
		end
	end;
	return false
end;
CreateElement("Corner", function(Scale, Offset)
	return Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
end)
CreateElement("Stroke", function(Color, Thickness)
	return Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
end)
CreateElement("List", function(Scale, Offset)
	return Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
end)
CreateElement("Padding", function(Bottom, Left, Right, Top)
	return Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
end)
CreateElement("TFrame", function()
	return Create("Frame", {
		BackgroundTransparency = 1
	})
end)
CreateElement("Frame", function(Color)
	return Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
end)
CreateElement("RoundFrame", function(Color, Scale, Offset)
	return Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
end)
CreateElement("Button", function()
	return Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
end)
CreateElement("ScrollFrame", function(Color, Width)
	return Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
end)
CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	local icon = GetIcon(ImageID)
	if icon then
		ImageNew.Image = icon
	end;
	return ImageNew
end)
CreateElement("ImageButton", function(ImageID)
	return Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
end)
CreateElement("Label", function(Text, TextSize, Transparency)
	return Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.Gotham,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
end)
local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})
function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15;
		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})
		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(25, 25, 25), 0, 10), {
			Parent = NotificationParent,
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, 0, 0, 0),
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y,
			ClipsDescendants = true
		}), {
			MakeElement("Stroke", Color3.fromRGB(93, 93, 93), 1.2),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Title"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.GothamSemibold,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})
		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Position = UDim2.new(0, 0, 0, 0)
		}):Play()
		task.wait(NotificationConfig.Time - 1)
		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			BackgroundTransparency = 1
		}):Play()
		TweenService:Create(NotificationFrame.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Transparency = 1
		}):Play()
		TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			ImageTransparency = 1
		}):Play()
		TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			TextTransparency = 1
		}):Play()
		TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			TextTransparency = 1
		}):Play()
		task.wait(0.5)
		NotificationParent:Destroy()
	end)
end;
local function _createKeyUI(config)
	local KeyFrame = Create("Frame", {
		Parent = Orion,
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.new(0.5, 0, 0.45, 0),
		Size = UDim2.new(0, 350, 0, 200),
		BackgroundColor3 = OrionLib.Themes.Default.Main,
		BorderSizePixel = 0,
		BackgroundTransparency = 1,
		Visible = false
	}, {
		MakeElement("Corner", 0, 10),
		AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke")
	})
	local Title = AddThemeObject(MakeElement("Label", config.Title, 18), {
		Parent = KeyFrame,
		Size = UDim2.new(1, 0, 0, 50),
		Font = Enum.Font.GothamBold,
		TextXAlignment = Enum.TextXAlignment.Center
	}, "Text")
	local Subtitle = AddThemeObject(MakeElement("Label", config.Subtitle, 14), {
		Parent = KeyFrame,
		Size = UDim2.new(1, -40, 0, 20),
		Position = UDim2.new(0, 20, 0, 50),
		Font = Enum.Font.Gotham,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextWrapped = true
	}, "TextDark")
	local KeyInput = AddThemeObject(Create("TextBox", {
		Parent = KeyFrame,
		Size = UDim2.new(1, -40, 0, 35),
		Position = UDim2.new(0, 20, 0, 85),
		BackgroundColor3 = OrionLib.Themes.Default.Second,
		Font = Enum.Font.Gotham,
		PlaceholderText = "Your Key Here",
		PlaceholderColor3 = OrionLib.Themes.Default.TextDark,
		TextColor3 = OrionLib.Themes.Default.Text,
		TextSize = 14,
		ClearTextOnFocus = false
	}), "Second", {
		MakeElement("Corner", 0, 6),
		AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke")
	})
	local SubmitButton = AddThemeObject(Create("TextButton", {
		Parent = KeyFrame,
		Size = UDim2.new(1, -40, 0, 35),
		Position = UDim2.new(0, 20, 0, 135),
		BackgroundColor3 = OrionLib.Themes.Default.Second,
		Font = Enum.Font.GothamBold,
		Text = "Submit",
		TextColor3 = OrionLib.Themes.Default.Text,
		TextSize = 16,
		AutoButtonColor = false
	}), "Second", {
		MakeElement("Corner", 0, 6),
		AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke")
	})
	local processing = false;
	AddConnection(SubmitButton.MouseButton1Click, function()
		if processing or KeyInput.Text == "" then
			return
		end;
		processing = true;
		SubmitButton.Text = "Checking..."
		task.spawn(function()
			local success, result = pcall(function()
				return OrionLib.KeyValidationFunction:Invoke(KeyInput.Text)
			end)
			task.wait(0.5)
			if success and result == true then
				SubmitButton.Text = "Success!"
				TweenService:Create(KeyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
					Position = UDim2.new(0.5, 0, 0.55, 0),
					BackgroundTransparency = 1
				}):Play()
				task.wait(0.5)
				_internalKeySuccessEvent:Fire()
				KeyFrame:Destroy()
			else
				SubmitButton.Text = "Submit"
				Subtitle.Text = "Invalid key. Please try again."
				Subtitle.TextColor3 = Color3.fromRGB(255, 80, 80)
				local originalPos = KeyFrame.Position;
				for i = 1, 5 do
					KeyFrame.Position = originalPos + UDim2.new(0, math.random(-5, 5), 0, 0)
					task.wait(0.05)
				end;
				KeyFrame.Position = originalPos;
				processing = false
			end
		end)
	end)
	AddConnection(SubmitButton.MouseEnter, function()
		TweenService:Create(SubmitButton, TweenInfo.new(0.2), {
			BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		}):Play()
	end)
	AddConnection(SubmitButton.MouseLeave, function()
		TweenService:Create(SubmitButton, TweenInfo.new(0.2), {
			BackgroundColor3 = OrionLib.Themes.Default.Second
		}):Play()
	end)
	KeyFrame.Visible = true;
	TweenService:Create(KeyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
		Position = UDim2.new(0.5, 0, 0.5, 0),
		BackgroundTransparency = 0
	}):Play()
end;
function OrionLib:Init()
	if OrionLib.SaveCfg and readfile and isfile then
		pcall(function()
			local filePath = OrionLib.Folder .. "/" .. game.GameId .. ".txt"
			if isfile(filePath) then
				LoadCfg(readfile(filePath))
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)
	end
end;
function OrionLib:MakeWindow(WindowConfig)
	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name;
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false;
	WindowConfig.HidePremium = WindowConfig.HidePremium or false;
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end;
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function()
	end;
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false;
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	if WindowConfig.KeySystem and WindowConfig.KeySystem.Enabled then
		if not OrionLib.KeyValidationFunction.OnInvoke then
			warn("Orion Library: KeySystem is enabled, but no 'OnInvoke' function was set for OrionLib.KeyValidationFunction.")
			OrionLib.KeyValidationFunction.OnInvoke = function(key)
				warn("Using placeholder validation for key '" .. key .. "'. This will always fail. Set a function for OrionLib.KeyValidationFunction.OnInvoke.")
				return false
			end
		end;
		local keySystemConfig = {
			Title = WindowConfig.KeySystem.Title or "Key System",
			Subtitle = WindowConfig.KeySystem.Subtitle or "Enter your key to continue."
		}
		_createKeyUI(keySystemConfig)
		_internalKeySuccessEvent.Event:Wait()
	end;
	OrionLib.Folder = WindowConfig.ConfigFolder;
	OrionLib.SaveCfg = WindowConfig.SaveConfig;
	if WindowConfig.SaveConfig and makefolder and not isfolder(WindowConfig.ConfigFolder) then
		makefolder(WindowConfig.ConfigFolder)
	end;
	local FirstTab = true;
	local Minimized = false;
	local UIHidden = false;
	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 4), {
		Size = UDim2.new(1, 0, 1, -50)
	}), {
		MakeElement("List"),
		MakeElement("Padding", 8, 0, 0, 8)
	}), "Divider")
	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16)
	end)
	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0)
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})
	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0)
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})
	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50)
	})
	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 10), {
		Size = UDim2.new(0, 150, 1, -50),
		Position = UDim2.new(0, 0, 0, 50)
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),
		TabHolder,
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50)
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),
			AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=" .. LocalPlayer.UserId .. "&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), {
					Size = UDim2.new(1, 0, 1, 0)
				}), "Second"),
				MakeElement("Corner", 1)
			}), "Divider"),
			SetChildren(SetProps(MakeElement("TFrame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1)
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "", 12), {
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		})
	}), "Second")
	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 20), {
		Size = UDim2.new(1, -30, 2, 0),
		Position = UDim2.new(0, 25, 0, -24),
		Font = Enum.Font.GothamBlack
	}), "Text")
	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1)
	}), "Stroke")
	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 10), {
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -172),
		Size = UDim2.new(0, 615, 0, 344),
		ClipsDescendants = true
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Name = "TopBar"
		}), {
			WindowName,
			WindowTopBarLine,
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 7), {
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -90, 0, 10)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), {
					Size = UDim2.new(0, 1, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0)
				}), "Stroke"),
				CloseBtn,
				MinimizeBtn
			}), "Second")
		}),
		DragPoint,
		WindowStuff
	}), "Main")
	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, -24)
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 25, 0, 15),
			Parent = MainWindow.TopBar
		})
	end;
	AddDraggingFunctionality(DragPoint, MainWindow)
	AddConnection(CloseBtn.MouseButton1Up, function()
		MainWindow.Visible = false;
		UIHidden = true;
		OrionLib:MakeNotification({
			Name = "Interface Hidden",
			Content = "Press RightShift to reopen the interface.",
			Time = 5
		})
		pcall(WindowConfig.CloseCallback)
	end)
	AddConnection(UserInputService.InputBegan, function(Input)
		if Input.KeyCode == Enum.KeyCode.RightShift and UIHidden then
			MainWindow.Visible = true;
			UIHidden = false
		end
	end)
	AddConnection(MinimizeBtn.MouseButton1Up, function()
		Minimized = not Minimized;
		if Minimized then
			MainWindow.ClipsDescendants = true;
			WindowTopBarLine.Visible = false;
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870"
			WindowStuff.Visible = false;
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, WindowName.TextBounds.X + 140, 0, 50)
			}):Play()
		else
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 615, 0, 344)
			}):Play()
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
			task.wait(.02)
			WindowStuff.Visible = true;
			WindowTopBarLine.Visible = true;
			MainWindow.ClipsDescendants = false
		end
	end)
	local function LoadSequence()
		MainWindow.Visible = false;
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 28, 0, 28),
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})
		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
			Parent = Orion,
			Size = UDim2.new(1, 0, 1, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 19, 0.5, 0),
			TextXAlignment = Enum.TextXAlignment.Center,
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			ImageTransparency = 0,
			Position = UDim2.new(0.5, 0, 0.5, 0)
		}):Play()
		task.wait(0.8)
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X / 2), 0.5, 0)
		}):Play()
		task.wait(0.3)
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			TextTransparency = 0
		}):Play()
		task.wait(2)
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			TextTransparency = 1
		}):Play()
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			ImageTransparency = 1
		}):Play()
		task.wait(0.3)
		MainWindow.Visible = true;
		LoadSequenceLogo:Destroy()
		LoadSequenceText:Destroy()
	end;
	if WindowConfig.IntroEnabled then
		LoadSequence()
	else
		MainWindow.Visible = true
	end;
	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false;
		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 10, 0.5, 0),
				ImageTransparency = 0.4,
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0),
				Position = UDim2.new(0, 35, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.4,
				Name = "Title"
			}), "Text")
		})
		local icon = GetIcon(TabConfig.Icon)
		if icon then
			TabFrame.Ico.Image = icon
		end;
		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
			Size = UDim2.new(1, -150, 1, -50),
			Position = UDim2.new(0, 150, 0, 50),
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15)
		}), "Divider")
		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30)
		end)
		if FirstTab then
			FirstTab = false;
			TabFrame.Ico.ImageTransparency = 0;
			TabFrame.Title.TextTransparency = 0;
			TabFrame.Title.Font = Enum.Font.GothamBlack;
			Container.Visible = true
		end;
		AddConnection(TabFrame.MouseButton1Click, function()
			for _, Tab in ipairs(TabHolder:GetChildren()) do
				if Tab:IsA("TextButton") then
					Tab.Title.Font = Enum.Font.GothamSemibold;
					TweenService:Create(Tab.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
						ImageTransparency = 0.4
					}):Play()
					TweenService:Create(Tab.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
						TextTransparency = 0.4
					}):Play()
				end
			end;
			for _, ItemContainer in ipairs(MainWindow:GetChildren()) do
				if ItemContainer.Name == "ItemContainer" then
					ItemContainer.Visible = false
				end
			end;
			TweenService:Create(TabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				ImageTransparency = 0
			}):Play()
			TweenService:Create(TabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				TextTransparency = 0
			}):Play()
			TabFrame.Title.Font = Enum.Font.GothamBlack;
			Container.Visible = true
		end)
		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")
				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
					LabelFrame.Content.Text = ToChange
				end;
				return LabelFunction
			end;
			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Text"
				Content = Content or "Content"
				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0),
						Position = UDim2.new(0, 12, 0, 26),
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")
				AddConnection(ParagraphFrame.Content:GetPropertyChangedSignal("TextBounds"), function()
					ParagraphFrame.Content.Size = UDim2.new(1, -24, 0, ParagraphFrame.Content.TextBounds.Y)
					ParagraphFrame.Size = UDim2.new(1, 0, 0, ParagraphFrame.Content.TextBounds.Y + 35)
				end)
				ParagraphFrame.Content.Text = Content;
				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
					ParagraphFrame.Content.Text = ToChange
				end;
				return ParagraphFunction
			end;
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function()
				end;
				ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://3944703587"
				local Button = {}
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 33),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -30, 0, 7)
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")
				local baseColor = OrionLib.Themes[OrionLib.SelectedTheme].Second;
				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25), {
						BackgroundColor3 = baseColor:Lerp(Color3.new(1, 1, 1), 0.1)
					}):Play()
				end)
				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25), {
						BackgroundColor3 = baseColor
					}):Play()
				end)
				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.1), {
						BackgroundColor3 = baseColor:Lerp(Color3.new(1, 1, 1), 0.2)
					}):Play()
				end)
				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.1), {
						BackgroundColor3 = baseColor:Lerp(Color3.new(1, 1, 1), 0.1)
					}):Play()
					task.spawn(ButtonConfig.Callback)
				end)
				function Button:Set(ButtonText)
					ButtonFrame.Content.Text = ButtonText
				end;
				return Button
			end;
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false;
				ToggleConfig.Callback = ToggleConfig.Callback or function()
				end;
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
				ToggleConfig.Flag = ToggleConfig.Flag or nil;
				ToggleConfig.Save = ToggleConfig.Save or false;
				local Toggle = {
					Value = ToggleConfig.Default,
					Save = ToggleConfig.Save,
					Type = "Toggle"
				}
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -24, 0.5, 0),
					AnchorPoint = Vector2.new(0.5, 0.5)
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = ToggleConfig.Color,
						Name = "Stroke",
						Transparency = 0.5
					}),
					SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						Name = "Ico"
					})
				})
				local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
						Size = UDim2.new(1, -40, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")
				function Toggle:Set(Value)
					Toggle.Value = Value;
					local offColor = OrionLib.Themes.Default.Divider;
					local onColor = ToggleConfig.Color;
					TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
						BackgroundColor3 = Toggle.Value and onColor or offColor
					}):Play()
					TweenService:Create(ToggleBox.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
						Color = Toggle.Value and onColor or OrionLib.Themes.Default.Stroke
					}):Play()
					TweenService:Create(ToggleBox.Ico, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
						ImageTransparency = Toggle.Value and 0 or 1,
						Size = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)
					}):Play()
					pcall(ToggleConfig.Callback, Toggle.Value)
				end;
				Toggle:Set(Toggle.Value)
				AddConnection(Click.MouseButton1Up, function()
					Toggle:Set(not Toggle.Value)
					if Toggle.Save then
						SaveCfg(game.GameId)
					end
				end)
				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end;
				return Toggle
			end;
			function ElementFunction:AddSlider(SliderConfig)
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0;
				SliderConfig.Max = SliderConfig.Max or 100;
				SliderConfig.Increment = SliderConfig.Increment or 1;
				SliderConfig.Default = SliderConfig.Default or 50;
				SliderConfig.Callback = SliderConfig.Callback or function()
				end;
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
				SliderConfig.Flag = SliderConfig.Flag or nil;
				SliderConfig.Save = SliderConfig.Save or false;
				local Slider = {
					Value = SliderConfig.Default,
					Save = SliderConfig.Save,
					Type = "Slider"
				}
				local Dragging = false;
				local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Size = UDim2.new(0, 0, 1, 0),
					BackgroundTransparency = 0.3,
					ClipsDescendants = true
				}), {
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 6),
						Font = Enum.Font.GothamBold,
						Name = "Value"
					}), "Text")
				})
				local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Size = UDim2.new(1, -24, 0, 26),
					Position = UDim2.new(0, 12, 0, 30),
					BackgroundTransparency = 0.9
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = SliderConfig.Color
					}),
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 6),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextTransparency = 0.8
					}), "Text"),
					SliderDrag
				})
				local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
					Size = UDim2.new(1, 0, 0, 65),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar
				}), "Second")
				function Slider:Set(Value)
					self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
					local scale = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
					TweenService:Create(SliderDrag, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.fromScale(scale, 1)
					}):Play()
					local text = tostring(self.Value) .. " " .. SliderConfig.ValueName;
					SliderBar.Value.Text = text;
					SliderDrag.Value.Text = text;
					pcall(SliderConfig.Callback, self.Value)
				end;
				Slider:Set(Slider.Value)
				local function updateFromInput(Input)
					local SizeScale = math.clamp((Input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
					Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
				end;
				SliderBar.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = true;
						updateFromInput(Input)
					end
				end)
				SliderBar.InputEnded:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = false;
						if Slider.Save then
							SaveCfg(game.GameId)
						end
					end
				end)
				UserInputService.InputChanged:Connect(function(Input)
					if Dragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
						updateFromInput(Input)
					end
				end)
				if SliderConfig.Flag then
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end;
				return Slider
			end;
			function ElementFunction:AddDropdown(DropdownConfig)
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default or ""
				DropdownConfig.Callback = DropdownConfig.Callback or function()
				end;
				DropdownConfig.Flag = DropdownConfig.Flag or nil;
				DropdownConfig.Save = DropdownConfig.Save or false;
				local Dropdown = {
					Value = DropdownConfig.Default,
					Options = DropdownConfig.Options,
					Buttons = {},
					Toggled = false,
					Type = "Dropdown",
					Save = DropdownConfig.Save
				}
				local MaxElements = 5;
				if not table.find(Dropdown.Options, Dropdown.Value) then
					Dropdown.Value = "..."
				end;
				local DropdownList = MakeElement("List")
				local DropdownContainer = AddThemeObject(SetProps(SetChildren(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
					DropdownList
				}), {
					Parent = ItemParent,
					Position = UDim2.new(0, 0, 0, 38),
					Size = UDim2.new(1, 0, 1, -38),
					ClipsDescendants = true
				}), "Divider")
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
					DropdownContainer,
					SetProps(SetChildren(MakeElement("TFrame"), {
						AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
							Size = UDim2.new(1, -12, 1, 0),
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold
						}), "Text"),
						AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
							Size = UDim2.new(0, 20, 0, 20),
							AnchorPoint = Vector2.new(0, 0.5),
							Position = UDim2.new(1, -30, 0.5, 0),
							Name = "Ico"
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Label", "Selected", 13), {
							Size = UDim2.new(1, -40, 1, 0),
							Name = "Selected",
							TextXAlignment = Enum.TextXAlignment.Right
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Frame"), {
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false
						}), "Stroke"),
						Click
					}), {
						Size = UDim2.new(1, 0, 0, 38),
						ClipsDescendants = true,
						Name = "F"
					}),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("Corner")
				}), "Second")
				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
					DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y)
				end)
				local function createOption(Option)
					local OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button"), {
						MakeElement("Corner", 0, 6),
						AddThemeObject(SetProps(MakeElement("Label", Option, 13, 0.4), {
							Position = UDim2.new(0, 8, 0, 0),
							Size = UDim2.new(1, -8, 1, 0),
							Name = "Title"
						}), "Text")
					}), {
						Parent = DropdownContainer,
						Size = UDim2.new(1, 0, 0, 28),
						BackgroundTransparency = 1,
						ClipsDescendants = true
					}), "Divider")
					AddConnection(OptionBtn.MouseButton1Click, function()
						Dropdown:Set(Option)
						if Dropdown.Save then
							SaveCfg(game.GameId)
						end
					end)
					Dropdown.Buttons[Option] = OptionBtn
				end;
				function Dropdown:Refresh(Options, Delete)
					if Delete then
						for _, v in pairs(Dropdown.Buttons) do
							v:Destroy()
						end;
						Dropdown.Options, Dropdown.Buttons = {}, {}
					end;
					Dropdown.Options = Options;
					for _, opt in ipairs(Options) do
						createOption(opt)
					end
				end;
				function Dropdown:Set(Value)
					Dropdown.Value = table.find(Dropdown.Options, Value) and Value or "..."
					DropdownFrame.F.Selected.Text = Dropdown.Value;
					for option, btn in pairs(Dropdown.Buttons) do
						local isSelected = option == Dropdown.Value;
						TweenService:Create(btn, TweenInfo.new(.15), {
							BackgroundTransparency = isSelected and 0 or 1
						}):Play()
						TweenService:Create(btn.Title, TweenInfo.new(.15), {
							TextTransparency = isSelected and 0 or 0.4
						}):Play()
					end;
					if Dropdown.Value ~= "..." then
						pcall(DropdownConfig.Callback, Dropdown.Value)
					end
				end;
				AddConnection(Click.MouseButton1Click, function()
					Dropdown.Toggled = not Dropdown.Toggled;
					DropdownFrame.F.Line.Visible = Dropdown.Toggled;
					TweenService:Create(DropdownFrame.F.Ico, TweenInfo.new(.15), {
						Rotation = Dropdown.Toggled and 180 or 0
					}):Play()
					local numOptions = #Dropdown.Options;
					local height = (numOptions > MaxElements and MaxElements or numOptions) * 28;
					TweenService:Create(DropdownFrame, TweenInfo.new(.15), {
						Size = Dropdown.Toggled and UDim2.new(1, 0, 0, 38 + height) or UDim2.new(1, 0, 0, 38)
					}):Play()
				end)
				Dropdown:Refresh(Dropdown.Options, false)
				Dropdown:Set(Dropdown.Value)
				if DropdownConfig.Flag then
					OrionLib.Flags[DropdownConfig.Flag] = Dropdown
				end;
				return Dropdown
			end;
			function ElementFunction:AddBind(BindConfig)
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown;
				BindConfig.Hold = BindConfig.Hold or false;
				BindConfig.Callback = BindConfig.Callback or function()
				end;
				BindConfig.Flag = BindConfig.Flag or nil;
				BindConfig.Save = BindConfig.Save or false;
				local Bind = {
					Value = BindConfig.Default,
					Binding = false,
					Type = "Bind",
					Save = BindConfig.Save
				}
				local Holding = false;
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "", 14), {
						Size = UDim2.new(1, 0, 1, 0),
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
						Name = "Value"
					}), "Text")
				}), "Main")
				local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")
				function Bind:Set(Key)
					Bind.Binding = false;
					Bind.Value = Key or Bind.Value;
					BindBox.Value.Text = Bind.Value.Name;
					TweenService:Create(BindBox, TweenInfo.new(0.25), {
						Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)
					}):Play()
				end;
				Bind:Set(BindConfig.Default)
				AddConnection(Click.MouseButton1Click, function()
					if Bind.Binding then
						return
					end;
					Bind.Binding = true;
					BindBox.Value.Text = "..."
				end)
				AddConnection(UserInputService.InputBegan, function(Input, gameProcessed)
					if gameProcessed then
						return
					end;
					if UserInputService:GetFocusedTextBox() then
						return
					end;
					if (Input.KeyCode == Bind.Value or Input.UserInputType == Bind.Value) and not Bind.Binding then
						if BindConfig.Hold then
							Holding = true;
							pcall(BindConfig.Callback, Holding)
						else
							pcall(BindConfig.Callback)
						end
					elseif Bind.Binding then
						local Key = (not CheckKey(BlacklistedKeys, Input.KeyCode)) and Input.KeyCode or (CheckKey(WhitelistedMouse, Input.UserInputType) and Input.UserInputType) or Bind.Value;
						Bind:Set(Key)
						if Bind.Save then
							SaveCfg(game.GameId)
						end
					end
				end)
				AddConnection(UserInputService.InputEnded, function(Input)
					if Input.KeyCode == Bind.Value or Input.UserInputType == Bind.Value then
						if BindConfig.Hold and Holding then
							Holding = false;
							pcall(BindConfig.Callback, Holding)
						end
					end
				end)
				if BindConfig.Flag then
					OrionLib.Flags[BindConfig.Flag] = Bind
				end;
				return Bind
			end;
			function ElementFunction:AddTextbox(TextboxConfig)
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
				TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false;
				TextboxConfig.Callback = TextboxConfig.Callback or function()
				end;
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					PlaceholderColor3 = Color3.fromRGB(210, 210, 210),
					PlaceholderText = "Input",
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = false
				}), "Text")
				local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextboxActual
				}), "Main")
				local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer,
					Click
				}), "Second")
				AddConnection(TextboxActual:GetPropertyChangedSignal("TextBounds"), function()
					TweenService:Create(TextContainer, TweenInfo.new(0.45), {
						Size = UDim2.new(0, TextboxActual.TextBounds.X + 16, 0, 24)
					}):Play()
				end)
				AddConnection(TextboxActual.FocusLost, function(enterPressed)
					if enterPressed then
						pcall(TextboxConfig.Callback, TextboxActual.Text)
						if TextboxConfig.TextDisappear then
							TextboxActual.Text = ""
						end
					end
				end)
				TextboxActual.Text = TextboxConfig.Default;
				AddConnection(Click.MouseButton1Up, function()
					TextboxActual:CaptureFocus()
				end)
			end;
			function ElementFunction:AddColorpicker(ColorpickerConfig)
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255, 255, 255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function()
				end;
				ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil;
				ColorpickerConfig.Save = ColorpickerConfig.Save or false;
				local H, S, V = Color3.toHSV(ColorpickerConfig.Default)
				local Colorpicker = {
					Value = ColorpickerConfig.Default,
					Toggled = false,
					Type = "Colorpicker",
					Save = ColorpickerConfig.Save
				}
				local ColorSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(S, 0, 1 - V, 0),
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})
				local HueSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0.5, 0, 1 - H, 0),
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})
				local Color = Create("ImageLabel", {
					Size = UDim2.new(1, -25, 1, 0),
					Image = "rbxassetid://4155801252",
					ZIndex = 2
				}, {
					Create("UICorner", {
						CornerRadius = UDim.new(0, 5)
					}),
					ColorSelection
				})
				local Hue = Create("Frame", {
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -20, 0, 0),
					ZIndex = 2
				}, {
					Create("UIGradient", {
						Rotation = 270,
						Color = ColorSequence.new({
							ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 4)),
							ColorSequenceKeypoint.new(0.16, Color3.fromRGB(255, 255, 0)),
							ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
							ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
							ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)),
							ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
							ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))
						})
					}),
					Create("UICorner", {
						CornerRadius = UDim.new(0, 5)
					}),
					HueSelection
				})
				local ColorpickerContainer = Create("Frame", {
					Position = UDim2.new(0, 0, 0, 32),
					Size = UDim2.new(1, 0, 0),
					BackgroundTransparency = 1,
					ClipsDescendants = true
				}, {
					Hue,
					Color,
					Create("UIPadding", {
						PaddingLeft = UDim.new(0, 35),
						PaddingRight = UDim.new(0, 35),
						PaddingBottom = UDim.new(0, 10),
						PaddingTop = UDim.new(0, 17)
					})
				})
				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
				local ColorpickerBox = SetProps(MakeElement("RoundFrame", Colorpicker.Value, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				})
				local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
					SetProps(SetChildren(MakeElement("TFrame"), {
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
							Size = UDim2.new(1, -40, 1, 0),
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), {
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false
						}), "Stroke")
					}), {
						Size = UDim2.new(1, 0, 0, 38),
						ClipsDescendants = true,
						Name = "F"
					}),
					ColorpickerContainer,
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")
				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled;
					TweenService:Create(ColorpickerFrame, TweenInfo.new(.15), {
						Size = Colorpicker.Toggled and UDim2.new(1, 0, 0, 148) or UDim2.new(1, 0, 0, 38)
					}):Play()
					ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				end)
				local function updateColor()
					Color.BackgroundColor3 = Color3.fromHSV(H, 1, 1)
					Colorpicker.Value = Color3.fromHSV(H, S, V)
					ColorpickerBox.BackgroundColor3 = Colorpicker.Value;
					pcall(ColorpickerConfig.Callback, Colorpicker.Value)
				end;
				local function drag(frame, selection, callback)
					local connection;
					frame.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							if connection then
								connection:Disconnect()
							end;
							connection = RunService.RenderStepped:Connect(function()
								local mousePos = UserInputService:GetMouseLocation()
								local relPos = mousePos - frame.AbsolutePosition;
								local x = math.clamp(relPos.x / frame.AbsoluteSize.X, 0, 1)
								local y = math.clamp(relPos.y / frame.AbsoluteSize.Y, 0, 1)
								selection.Position = UDim2.new(x, 0, y, 0)
								callback(x, y)
								updateColor()
							end)
						end
					end)
					frame.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and connection then
							connection:Disconnect()
							if Colorpicker.Save then
								SaveCfg(game.GameId)
							end
						end
					end)
				end;
				drag(Color, ColorSelection, function(x, y)
					S, V = x, 1 - y
				end)
				drag(Hue, HueSelection, function(x, y)
					H = 1 - y;
					HueSelection.Position = UDim2.new(0.5, 0, y, 0)
				end)
				function Colorpicker:Set(Value)
					H, S, V = Color3.toHSV(Value)
					ColorSelection.Position = UDim2.new(S, 0, 1 - V, 0)
					HueSelection.Position = UDim2.new(0.5, 0, 1 - H, 0)
					updateColor()
				end;
				updateColor()
				if ColorpickerConfig.Flag then
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end;
				return Colorpicker
			end;
			return ElementFunction
		end;
		local ElementFunction = {}
		function ElementFunction:AddSection(SectionConfig)
			SectionConfig.Name = SectionConfig.Name or "Section"
			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 0, 26),
				Parent = Container
			}), {
				AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
					Size = UDim2.new(1, -12, 0, 16),
					Position = UDim2.new(0, 0, 0, 3),
					Font = Enum.Font.GothamSemibold
				}), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), {
					Size = UDim2.new(1, 0, 1, -24),
					Position = UDim2.new(0, 0, 0, 23),
					Name = "Holder"
				}), {
					MakeElement("List", 0, 6)
				})
			})
			AddConnection(SectionFrame.Holder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
				local contentSizeY = SectionFrame.Holder.UIListLayout.AbsoluteContentSize.Y;
				SectionFrame.Size = UDim2.new(1, 0, 0, contentSizeY + (contentSizeY > 0 and 31 or 26))
				SectionFrame.Holder.Size = UDim2.new(1, 0, 0, contentSizeY)
			end)
			return GetElements(SectionFrame.Holder)
		end;
		for i, v in pairs(GetElements(Container)) do
			ElementFunction[i] = v
		end;
		return ElementFunction
	end;
	return TabFunction
end;
function OrionLib:Destroy()
	if Orion then
		Orion:Destroy()
	end;
	for _, Connection in ipairs(OrionLib.Connections) do
		Connection:Disconnect()
	end;
	table.clear(OrionLib.Connections)
end;
return OrionLib
